x <- seq(0,100,0.1)
fx <- choose(12,1)*x^1*(1-x)^11
plot(x,fx,type="l")
plot(x,fx)
fx <- 12*x*(1-x)^11
plot(x,fx)
x <- seq(0,100,1)
fx <- 12*x*(1-x)^11
plot(x,fx)
x <- c(0:100)
fx <- 12*x*(1-x)^11
plot(x,fx)
x <- seq(0,1,0.01)
fx <- 12*x*(1-x)^11
plot(x,fx)
plot(x,fx, type="l")
2/pi*sin(sqrt(.6))^(-1)
54*3
12^3/162-6^3/162
54*4
12^4/216-6^4/216
90-9.33^2
sqrt(2.9511)
11^2/108
9.33+1.717877
9.33-1.717877
(4*1.5-2*1.5^2)/3
54*3
12^2/108-6^2/108
11.04788^2/108-7.612123^2/108
-exp(x^2/20000)
x <- 200
-exp(x^2/20000)
exp(x^2/20000)
x <- 200
exp(-x^2/20000)
-(exp(-x^2/20000)-1)
1-(-(exp(-x^2/20000)-1))
x <- c(200,100)
(-(exp(-x^2/20000)-1))
x[1]-x[2]
x[1]
px <- (-(exp(-x^2/20000)-1))
px[1]-px[2]
4-1/3
2+1/3
3.6-2.3
1/((4-1/3)-(2+1/3))
1-0.75*(0.66666666667)
x <- c(3.25,2)
px <- 0.75*(x-((x-3)^3)/3)
px[1]-px[2]
x <- c(2.75,2)
px <- 0.75*(x-((x-3)^3)/3)
px[1]-px[2]
0.6835938-0.3164062
x <- c(2.5,2)
px <- 0.75*(x-((x-3)^3)/3)
px[1]-px[2]
x <- c(4,3.5)
px <- 0.75*(x-((x-3)^3)/3)
px[1]-px[2]
0.15625*2
9/50
x <- c(8,5)
px <- .4*x-x^2/50
px[1]-px[2]
x <- c(10,6)
px <- .4*x-x^2/50
px[1]-px[2]
4/50
x <- c(1,(-1))
px <- 0.5+(3/32)*(4*x-(x^3)/3)
px[1]-px[2]
1-(0.5+(3/32)*(4*0.5-(0.5^3)/3))
x <- seq(0,1,0.01)
fx <- 90x^8*(1-x)
plot(x,fx)
x <- seq(0,1,0.01)
fx <- 90*x^8*(1-x)
plot(x,fx)
plot(x,fx, type="l")
Fx <- 10x^9-9x^10
Fx <- 10*x^9-9x^10
Fx <- 10*x^9-9*x^10
lines(x,Fx, type="l")
lines(x,Fx)
plot(x,Fx, type='l')
plot(x,fx, type="l")
plot(x,Fx, type='l')
10*(0.5)^9-9*0.5^10
x <- 10*(0.5)^9-9*0.5^10
y <- 10*(0.25)^9-9*0.25^10
x-y
10*(0.75)^9-9*0.75^10
400/25
7.5^2/25
225/25
x <- seq(2,4,0.01)
Fx <- 0.75*x-(x-3)^3/4
plot(x,Fx, type='l')
Fx <- 0.75*x-((x-3)^3)/4
plot(x,Fx, type='l')
x <- seq(0,5,0.1)
y <- seq(5,10,0.1)
Fx1 <- x^2/50
Fx2 <- 0.4*x-x^2/50
plot(x,Fx1, type="l")
lines(x,Fx2)
x <- seq(0,5,0.1)
y <- seq(5,10,0.1)
Fx1 <- x^2/50
Fx2 <- 0.4*y-y^2/50
plot(x,Fx1, type="l")
lines(x,Fx2)
x <- seq(0,5,0.1)
y <- seq(5,10,0.1)
Fx1 <- x^2/50
Fx2 <- 0.4*y-y^2/50
plot(x,Fx1, type="l")
lines(y,Fx2)
lines(y,Fx2, type="l")
plot(x,Fx1, type="l", xlim=c(0,10))
lines(y,Fx2, type="l")
plot(x,Fx1, type="l", xlim=c(0,10), ylim=c(0,1))
lines(y,Fx2, type="l")
Fx2
plot(x,Fx1, type="l", xlim=c(0,10), ylim=c(0,2))
lines(y,Fx2, type="l")
Fx2 <- (0.4*y)-(y^2/50)
plot(x,Fx1, type="l", xlim=c(0,10), ylim=c(0,2))
lines(y,Fx2, type="l")
Fx2
125/75
100/5-1000/75
(100/5-1000/75)-(5-125/75)
qnorm(0.9838)
qnorm(0.291)
qnorm(0)
1-qnorm(0.121
)
qnorm(0.668)
qnorm(0.016)/2
pnorm(15,15,1.25)
pnorm(17.5,15,1.25)
1-pnorm(10,15,1.25)
pnorm(18,15,1.25)-pnorm(14,15,1.25)
pnorm(4500,3500,600)-pnorm(3000,3500,600)
pnorm(2500,3500,600)
1-pnorm(6000,3500,600)
qnorm(0.001,3500,600)
qnorm(0.999,3500,600)
pnorm(20,30,7.8)
qnorm(0.75,30,7.8)
qnorm(0.15,30,7.8)
qnorm(0.1,30,7.8)
qnorm(0.9,30,7.8)
pnorm(10,8.8,2.8)
1-pnorm(10,8.8,2.8)
1-pnorm(20,8.8,2.8)
pnorm(10,8.8,2.8)-pnorm(5,8.8,2.8)
qnorm(0.01,8.8,2.8)
qnorm(0.99,8.8,2.8)
8.8-2.286226
8.8+6.513774
pnorm(10,8.8,2.8)
(1-pnorm(10,8.8,2.8))*4
qnorm(0.9,98.25,0.75)
qnorm(0.05,98.25,0.75)
qnorm(0.25,98.25,0.75)
pbinom(15,25,0.5)
pbinom(15,25,0.5)
pbinom(15,25,0.6)
pbinom(15,25,0.8)
pbinom(20,25,0.5)-pbinom(15,25,0.5)
pbinom(20,25,0.6)-pbinom(15,25,0.6)
pbinom(20,25,0.8)-pbinom(15,25,0.8)
1-pbinom(20,25,0.5)
1-pbinom(20,25,0.6)
1-pbinom(20,25,0.8)
pbinom(370,500,0.7)-pbinom(320,500,.7)
pbinom(325,500,0.7)
pbinom(315,500,0.7)
setwd("~/Winter 2018/STAT 330 - Intro to Regression/Homework/Homework 1")
setwd("~/Winter 2018/STAT 330 - Intro to Regression/Homework/Homework 1")
setwd("~/STAT 330 - Intro to Regression/Homework/Homework 1")
wash <- read.csv("Washington Monument Visitors.csv", header=TRUE, sep=",")  #Reads in data to df
wash$RecreationVisitors <- as.numeric(gsub(',','',wash$RecreationVisitors)) #Takes out commas
wash$RecreationVisitors <- wash$RecreationVisitors/10^6                     #Changes visitors to millions
plot(RecreationVisitors~ï..Year, data=wash, type="b", ylab="Washington Monument NP Annual Visitors (in millions)")
plot(RecreationVisitors~ï..Year, data=wash, type="b", ylab="Washington Monument NP Annual Visitors (in millions)")
setwd("~/STAT 330 - Intro to Regression/Homework/Homework 1")
#Washington Monument Analysis
wash <- read.csv("Washington Monument Visitors.csv", header=TRUE, sep=",")  #Reads in data to df
wash$RecreationVisitors <- as.numeric(gsub(',','',wash$RecreationVisitors)) #Takes out commas
wash$RecreationVisitors <- wash$RecreationVisitors/10^6                     #Changes visitors to millions
plot(RecreationVisitors~ï..Year, data=wash, type="b", ylab="Washington Monument NP Annual Visitors (in millions)")
#Jefferson Memorial Analysis
jeff <- read.csv("Jefferson Memorial Visitors.csv", header=TRUE, sep=",")  #Reads in data to df
jeff$RecreationVisitors <- as.numeric(gsub(',','',jeff$RecreationVisitors)) #Takes out commas
jeff$RecreationVisitors <- jeff$RecreationVisitors/10^6                     #Changes visitors to millions
plot(RecreationVisitors~ï..Year, data=jeff, type="b", ylab="Jefferson Memorial NP Annual Visitors (in millions)")
#Wright Bros Analysis
bros <- read.csv("Wright Bros Memorial.csv", header=TRUE, sep=",")  #Reads in data to df
bros$RecreationVisitors <- as.numeric(gsub(',','',bros$RecreationVisitors)) #Takes out commas
bros$RecreationVisitors <- bros$RecreationVisitors/10^6                     #Changes visitors to millions
plot(RecreationVisitors~ï..Year, data=bros, type="b", ylab="Wright Bros Memorial NP Annual Visitors (in millions)")
#Acadia Analysis
aca <- read.csv("Acadia.csv", header=TRUE, sep=",")  #Reads in data to df
aca$RecreationVisitors <- as.numeric(gsub(',','',aca$RecreationVisitors)) #Takes out commas
aca$RecreationVisitors <- aca$RecreationVisitors/10^6                     #Changes visitors to millions
plot(RecreationVisitors~ï..Year, data=aca, type="b", ylab="Acadia NP Annual Visitors (in millions)")
linc <- read.csv("Lincoln.csv", header=TRUE, sep=",")  #Reads in data to df
linc$RecreationVisitors <- as.numeric(gsub(',','',linc$RecreationVisitors)) #Takes out commas
linc$RecreationVisitors <- linc$RecreationVisitors/10^6                     #Changes visitors to millions
plot(RecreationVisitors~ï..Year, data=linc, type="b", ylab="Lincoln Memorial NP Annual Visitors (in millions)")
#Insert comments on analysis
linc2000 <- subset(linc, ï..Year > 1999)
plot(RecreationVisitors~ï..Year, data=linc2000)
# It doesn't really make sense to transform our data because our model isn't really showing a mulitpolicative curve. What I decided to do was filter to the years 2000 until now because before the year 2000 are such volatile numbers due to different events happening in DC during the time. For example, there's a spike in the 60's due to Civil Right's movements, but there was an uncharacteristic dip where for most of the 90's there were few visitors. I couldn't find a whole lot of information on it, but I learned that the monument was closed for a period of time in the 90's for renovation, and they closed off parts of the monument to public access. I felt that it would affect my prediction negatively, so I filtered from the year 2000 on.
library(astsa)
install.packages("astsa")
library(astsa)
linc2000.out <-sarima(linc2000$RecreationVisitors, 1, 1, 1)
summary(linc2000.out)
#compute predicitons for the next 5 years
linc2000.future <- sarima.for(linc2000$RecreationVisitors, n.ahead=5,1,1,1)
linc2000.future
#computer 95% prediction intervals
linc2000.ci <- linc2000.future$pred + c(-1,1)*qnorm(0.975) * linc2000.future$se
pexp(100,0.01386)
1-exp(-0.01386*100)
pexp(200,0.01386)
pexp(200,0.01386)-pexp(100,0.01386)
1/0.01386+2/0.01386
pexp(216.4502,0.01386)
1-pexp(216.4502,0.01386)
log(0.5)/-0.01386
qexp(0.5,0.01386)
1/2.725
1-pexp(2,0.3669725)
1-pexp(3,0.3669725)
pexp(3,0.3669725)-pexp(2,0.3669725)
2.725*3
pexp(8.175,0.3669725)
1-pexp(8.175,0.3669725)
pexp(0,0.3669725)
2.725-1/0.3669725
pexp(3,0.3669725)
pgamma(5,7,1)
1-pgamma(8,7,1)
pgamma(8,7,1)-pgamma(3,7,1)
pgamma(4,7,1)+(1-pgamma(6,7,1))
sqrt(12*49)
pgamma(190,12,1/7)-pgamma(140,12,1/7)
pgamma(84+24.24871,12,1/7)
1-pgamma(84+24.24871,12,1/7)
qgamma(0.95,12,1/7)
clear()
gamma(2)
3*gamma(3/2)
9*gamma(2)+gamma(2)^2
3^2*(gamma(1+2/2)-(gamma(3/2)^2))
pgamma(2,3)
pweibull(6,2,scale=3)
pweibull(6,2,scale=3)-pweibull(1.5,2,scale=3)
pweibull(6,2,scale=3)-pweibull(1.5,2,3)
pweibull(250-3.5,2.5,200)
1-exp((-(250-3.5)/1.5)^2)
1-exp(-((250-3.5)/1.5)^2)
exp(((250-3.5)/1.5)^2)
exp(-((250-3.5)/1.5)^2)
pweibull(250-3.5,2.5,200)
1.5*gamma(3/2)+3.5
1.5^2*gamma(2)-gamma(3/2)^2
1.5^2*(gamma(2)-gamma(3/2)^2)
1-pweibull(5-3.5,2,1.5)
pweibull(8-3.5,2,1.5)-pweibull(5-3.5,2,1.5)
qweibull(0.5,2,3)
qweibull(0.5,2,1.5)
qweibull(0.1,2,1.5)
pweibull(0.5,1.817,0.863)
0.863*gamma(1+1/1.817)
0.863^2*(gamma(1+2/1.817)-(gamma(1+1/1.817))^2)
0.1911941+0.767116
1-pweibull(0.9583101,1.817,0.863)
1-pweibull(0.9583101,1.817,0.863,lower.tail = FALSE)
sqrt(0.1911941)+0.767116
sqrt(0.1911941)+0.767116
qweibull(0.5,1.817,0.863)
exp(4.5+0.8^2/2)
exp(2*4.5+0.8^2)*exp(0.8^2)-1
sqrt(exp(2*4.5+0.8^2)*exp(0.8^2)-1)
sqrt(exp(2*4.5+0.8^2)*(exp(0.8^2)-1))
exp(2*4.5+0.8^2)*(exp(0.8^2)-1)
plnorm(100,4.5,0.8)
1-plnorm(200,4.5,0.8)
1.03^2
plnorm(1,-0.1422,0.7625)
plnorm(1,-0.1422,0.7625,lower.tail = FALSE)
qlnorm(0.5,-0.1422,0.7625)+1
qlnorm(0.99,-0.1422,0.7625)+1
exp(1.9+0.9^2/2)
sqrt(exp(2*1.9+0.9^2)*(exp(0.9^2)-1))
plnorm(10,1.9,0.9)
plnorm(10,1.9,0.9)-plnorm(5,1.9,0.9)
5/7
10/(100*11)
10/(49+8)
10/(49*8)
pbeta(0.2,5,2)
pbeta(0.4,5,2)-pbeta(0.2,5,2)
factorial(12)/factorial(2)^6
factorial(12)/2^6
(factorial(12)/2^6)*0.24^2*0.2^2*0.16.^2*0.14^2*0.13^2*0.13^2
(factorial(12)/2^6)*0.24^2*0.2^2*0.16^2*0.14^2*0.13^2*0.13^2
(factorial(6))*0.24^2*0.2*0.16*0.14*0.13*0.13
1-(factorial(6))*0.24^2*0.2*0.16*0.14*0.13*0.13
choose(10,3)*0.2^3*0.8^7
choose(4,2)*0.6^2*0.4^2*0.15
0.1+0.2*0.6+0.3*0.6^2+0.25*0.6^3+0.15*0.6^4
((30^3/3)-(20^3/3))+((30^3/3)-(20^3/3))
1/(12666.67*20)
3/380000
26^3/3
20^3/3
26^3/3-20^3/3
(3192*26+26^3/3)-(3192*20+20^3/3)
((3192*26+26^3/3)-(3192*20+20^3/3))*(3/380000)
((3192*26+2*26^3)-(3192*20+2*20^3))*(3/380000)
0+5*0.06+10*0.02+15*0.1+5*0.04+10*0.15+15*0.2+20*0.1+10*0.01+15*0.15+20*0.14+25*0.01
5*0.06+10*0.02+15*0.1+10*0.2+15*0.1+15*0.01+5*0.04+10*0.01+10*0.15
5*0.06+10*0.02+15*0.1+10*0.2+15*0.1+15*0.01+5*0.04+10*0.01+10*0.15+(10*0.15)+(20*0.14)
5*0.06+10*0.02+15*0.1+10*0.2+15*0.1+15*0.01+5*0.04+10*0.01+10*0.15+(5*0.15)+(10*0.14)
0.2*2+0.2*3+0.2*4+0.2*3+0.2*2
10*0.015+20*0.01+3*0.05+13*0.03+23*0.02+6*0.125+16*0.075+26*0.05+9*0.15+19*0.09+29*0.06+12*0.1+22*0.06+32*0.04+15*0.05+25*0.03+35*0.02
(0-x)*(0-y)*(0.02)+(0-x)*(5-y)*(0.06)+(0-x)*(10-y)*(0.02)+(0-x)*(15-y)*(0.1)+(5-x)*(0-y)*(0.04)+(5-x)*(5-y)*(0.15)+(5-x)*(10-y)*(0.2)+(5-x)*(15-y)*(0.1)+(10-x)*(0-y)*(0.01)+(10-x)*(5-y)*(0.15)+(10-x)*(10-y)*(0.14)+(10-x)*(15-y)*(0.01)
x<-5.55
y<-8.55
(0-x)*(0-y)*(0.02)+(0-x)*(5-y)*(0.06)+(0-x)*(10-y)*(0.02)+(0-x)*(15-y)*(0.1)+(5-x)*(0-y)*(0.04)+(5-x)*(5-y)*(0.15)+(5-x)*(10-y)*(0.2)+(5-x)*(15-y)*(0.1)+(10-x)*(0-y)*(0.01)+(10-x)*(5-y)*(0.15)+(10-x)*(10-y)*(0.14)+(10-x)*(15-y)*(0.01)
(0-x)*(0-x)*(0.02)+(0-x)*(0-x)*(0.06)+(0-x)*(0-x)*(0.02)+(0-x)*(0-x)*(0.1)+
(5-x)*(5-x)*(0.04)+(5-x)*(5-x)*(0.15)+(5-x)*(5-x)*(0.2)+(5-x)*(5-x)*(0.1)+
(10-x)*(10-x)*(0.01)+(10-x)*(10-x)*(0.15)+(10-x)*(10-x)*(0.14)+(10-x)*(10-x)*(0.01)
sqrt((0-x)*(0-x)*(0.02)+(0-x)*(0-x)*(0.06)+(0-x)*(0-x)*(0.02)+(0-x)*(0-x)*(0.1)+
(5-x)*(5-x)*(0.04)+(5-x)*(5-x)*(0.15)+(5-x)*(5-x)*(0.2)+(5-x)*(5-x)*(0.1)+
(10-x)*(10-x)*(0.01)+(10-x)*(10-x)*(0.15)+(10-x)*(10-x)*(0.14)+(10-x)*(10-x)*(0.01))
sqrt((0-y)*(0-y)*(0.02)+(5-y)*(5-y)*(0.06)+(10-y)*(10-y)*(0.02)+(15-y)*(15-y)*(0.1)+
(0-y)*(0-y)*(0.04)+(5-y)*(5-y)*(0.15)+(10-y)*(10-y)*(0.2)+(15-y)*(15-y)*(0.1)+
(0-y)*(0-y)*(0.01)+(5-y)*(5-y)*(0.15)+(10-y)*(10-y)*(0.14)+(15-y)*(15-y)*(0.01))
(-3.2025)/(3.528101*4.375786)
sample(1:1000, 1000)
rnorm(1000,300,50)
plot(rnorm(1000,300,50))
hist(rnorm(1000,300,50))
pnorm(200,180,sqrt(45))
pnorm(200,180,sqrt(45))-pnorm(150,180,sqrt(45))
pnorm(55,60,sqrt(5))
1-pnorm(55,60,sqrt(5))
pnorm(62,60,sqrt(5))-pnorm(58,60,sqrt(5))
pnorm(5,0,sqrt(45/2))-pnorm(-10,0,sqrt(45/2))
pnorm(160,150,6)
1-pnorm(0,-30,sqrt(78))
(1/3)^2
(1/3)^2*3+2
37/12
1+1-0.11111111111-0.111111111111-0.111111111111
(0.5^2*4)
0.5^2*4+0.5^2*4
2+((-1/3)^2*3.5)*3
37/12
(0.5^2*3.5)*2+((1/3)^2*4)*3
1-pnorm(0,-1,sqrt(37/12))
pnorm(1,-1,sqrt(37/12))-pnorm(-1,-1,sqrt(37/12))
1-pnorm(75,50,10.3077)
pnorm(35,34,sqrt(0.42))-pnorm(34.5,34,sqrt(0.42))
install.packages("devtools")
install.packages("mlr", dependencies = TRUE, suggests = TRUE)
install.packages("mlrMBO", dependencies = TRUE)
install.packages("tidyverse", dependencies = TRUE)
devtools::install_github("Prometheus77/ucimlr")
devtools::install_github("Prometheus77/actools")
pnorm(200,158,sqrt(430.25))
install.packages(readr)
install.packages("readr")
library(dplyr)
library(readr)
#Titanic Practice
library(ggplot2)
setwd("~/1. Personal/My Projects/Titanic")
train <- read.csv("train.csv", header=TRUE)
test <- read.csv("test.csv", header=TRUE)
train <- na.omit(train)
head(train)
head(test)
train$Name <- NULL      #Don't need name for analysis
train$Cabin <- NULL     #Mostly empty column
train$Ticket <- NULL    #Not interested in their Ticket number
row <- sample(1:nrow(train), 600)
train.tr<-train[row,]
train.ts<-train[-row,]
#EDA
plot(train$Age, train$Survived)
ggplot(train, aes(x=Age, y=Survived)) + geom_smooth() + geom_point(aes(x=Age, y=Survived))
ggplot(train, aes(x=Fare, y=Survived)) + geom_smooth() + geom_point(aes(x=Fare, y=Survived))
ggplot(train, aes(x=Pclass, y=Survived)) + geom_smooth() + geom_point(aes(x=Pclass, y=Survived))
#Model
min.model <- glm(Survived~+1, data=train.tr, family="binomial")
max.model <- formula(glm(Survived~., data=train.tr, family="binomial"))
out1 <- step(min.model, direction="forward", scope=max.model)
out2 <- step(glm(Survived~., data=train.tr, family="binomial"))
out3 <- step(min.model, direction="both", scope=max.model)
#Predictions
library(ROCR)
train.pred <- prediction(predict(out1, type="response"), train.tr$Survived)
train.perf<-performance(train.pred, measure="tpr", x.measure="fpr")
plot(train.perf)
abline(0,1)
test.pred <- prediction(predict(out1, newdata=train.ts, type="response"), train.ts$Survived)
test.perf<-performance(test.pred, measure="tpr", x.measure="fpr")
plot(test.perf, add=TRUE, col="royalblue")
performance(test.pred, measure="auc")
summary(out1)
exp(-2.634) #Male
exp(-1.319) #PClass
exp(-0.047) #Age
exp(-0.354) #SibSp
out1 <- step(min.model, direction="forward", scope=max.model)
#Model
min.model <- glm(Survived~+1, data=train.tr, family="binomial")
train.tr<-train[row,]
train <- na.omit(train)
train <- read.csv("train.csv", header=TRUE)
setwd("~/My Projects/Titanic")
#Titanic Practice
library(ggplot2)
setwdsetwd("~/My Projects/Titanic")
train <- read.csv("train.csv", header=TRUE)
test <- read.csv("test.csv", header=TRUE)
train <- na.omit(train)
head(train)
head(test)
train$Name <- NULL      #Don't need name for analysis
train$Cabin <- NULL     #Mostly empty column
train$Ticket <- NULL    #Not interested in their Ticket number
row <- sample(1:nrow(train), 600)
train.tr<-train[row,]
train.ts<-train[-row,]
#EDA
plot(train$Age, train$Survived)
ggplot(train, aes(x=Age, y=Survived)) + geom_smooth() + geom_point(aes(x=Age, y=Survived))
ggplot(train, aes(x=Fare, y=Survived)) + geom_smooth() + geom_point(aes(x=Fare, y=Survived))
ggplot(train, aes(x=Pclass, y=Survived)) + geom_smooth() + geom_point(aes(x=Pclass, y=Survived))
#Model
min.model <- glm(Survived~+1, data=train.tr, family="binomial")
max.model <- formula(glm(Survived~., data=train.tr, family="binomial"))
out1 <- step(min.model, direction="forward", scope=max.model)
out2 <- step(glm(Survived~., data=train.tr, family="binomial"))
out3 <- step(min.model, direction="both", scope=max.model)
#Predictions
library(ROCR)
train.pred <- prediction(predict(out1, type="response"), train.tr$Survived)
train.perf<-performance(train.pred, measure="tpr", x.measure="fpr")
plot(train.perf)
abline(0,1)
test.pred <- prediction(predict(out1, newdata=train.ts, type="response"), train.ts$Survived)
test.perf<-performance(test.pred, measure="tpr", x.measure="fpr")
plot(test.perf, add=TRUE, col="royalblue")
performance(test.pred, measure="auc")
summary(out1)
exp(-2.634) #Male
exp(-1.319) #PClass
exp(-0.047) #Age
exp(-0.354) #SibSp
train <- read.csv("train.csv", header=TRUE)
test <- read.csv("test.csv", header=TRUE)
train <- na.omit(train)
head(train)
head(test)
train$Name <- NULL      #Don't need name for analysis
train$Cabin <- NULL     #Mostly empty column
train$Ticket <- NULL    #Not interested in their Ticket number
row <- sample(1:nrow(train), 600)
train.tr<-train[row,]
train.ts<-train[-row,]
#EDA
plot(train$Age, train$Survived)
ggplot(train, aes(x=Age, y=Survived)) + geom_smooth() + geom_point(aes(x=Age, y=Survived))
ggplot(train, aes(x=Fare, y=Survived)) + geom_smooth() + geom_point(aes(x=Fare, y=Survived))
ggplot(train, aes(x=Pclass, y=Survived)) + geom_smooth() + geom_point(aes(x=Pclass, y=Survived))
#Model
min.model <- glm(Survived~+1, data=train.tr, family="binomial")
max.model <- formula(glm(Survived~., data=train.tr, family="binomial"))
out1 <- step(min.model, direction="forward", scope=max.model)
out2 <- step(glm(Survived~., data=train.tr, family="binomial"))
out3 <- step(min.model, direction="both", scope=max.model)
#Predictions
library(ROCR)
train.pred <- prediction(predict(out1, type="response"), train.tr$Survived)
train.perf<-performance(train.pred, measure="tpr", x.measure="fpr")
plot(train.perf)
abline(0,1)
test.pred <- prediction(predict(out1, newdata=train.ts, type="response"), train.ts$Survived)
test.perf<-performance(test.pred, measure="tpr", x.measure="fpr")
plot(test.perf, add=TRUE, col="royalblue")
performance(test.pred, measure="auc")
summary(out1)
exp(-2.634) #Male
exp(-1.319) #PClass
exp(-0.047) #Age
exp(-0.354) #SibSp
View(train.tr)
View(train.ts)
